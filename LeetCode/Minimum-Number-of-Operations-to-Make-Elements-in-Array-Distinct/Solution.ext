class Solution {
public:
    int minimumOperations(vector<int>& nums) {
        // -----O(N2)-----
        // int cnt=0;
        // for(int i=0;i<nums.size();i=i+3){
        //     unordered_set<int>st;
        //     for(int j=i;j<nums.size();j++){
        //         st.insert(nums[j]);
                
        //     }
        //     if((nums.size()-i)!=st.size()){
        //         cnt++;
        //     }
        //     else{
        //         break;
        //     }
        // }
        // return cnt;

        // -----o(N)------------
        unordered_map<int,int>mp;
        int cnt=-1;
        for(int i=nums.size()-1;i>=0;i--){
           
            if(mp.find(nums[i])!=mp.end()){
                cnt=i+1;
                break;
            }
             mp[nums[i]]++;
        }
       if(cnt==-1)
       return 0;
       else{
        if(cnt%3==0){
            return cnt/3;
        }
        else
        return cnt/3+1;
       } 
    }
};