class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
       int time=0;
       unordered_map<char,int>mp;
       for(int i=0;i<tasks.size();i++){
           mp[tasks[i]]++;
       }
        // put frequency count in queue
        priority_queue<int>pq;
        for(auto it:mp){
            pq.push(it.second);
        } 
        // 
        while(!pq.empty()){
            vector<int>temp;
            int cnt=0;
            for(int i=0;i<=n;i++){
                if(!pq.empty()){
                int val=pq.top();
                pq.pop();
                temp.push_back(val-1);
                cnt++;
                }
            }
            for (int t : temp) {
                if (t > 0) {
                    pq.push(t); // Only push back if the task still needs to be executed
                }
            }
            if(pq.empty()){
                time+=cnt;
            }
            else{
                time+=n+1;
            }
        }
        return time;
    }
};